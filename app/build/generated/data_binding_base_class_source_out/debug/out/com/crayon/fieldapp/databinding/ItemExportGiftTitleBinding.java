// Generated by view binder compiler. Do not edit!
package com.crayon.fieldapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.crayon.fieldapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemExportGiftTitleBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout rlNumber;

  @NonNull
  public final TextView txtConsume;

  @NonNull
  public final TextView txtGift;

  @NonNull
  public final TextView txtImport;

  @NonNull
  public final TextView txtRemainActual;

  @NonNull
  public final TextView txtRemainPlan;

  private ItemExportGiftTitleBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout rlNumber, @NonNull TextView txtConsume, @NonNull TextView txtGift,
      @NonNull TextView txtImport, @NonNull TextView txtRemainActual,
      @NonNull TextView txtRemainPlan) {
    this.rootView = rootView;
    this.rlNumber = rlNumber;
    this.txtConsume = txtConsume;
    this.txtGift = txtGift;
    this.txtImport = txtImport;
    this.txtRemainActual = txtRemainActual;
    this.txtRemainPlan = txtRemainPlan;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemExportGiftTitleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemExportGiftTitleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_export_gift_title, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemExportGiftTitleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.rl_number;
      RelativeLayout rlNumber = rootView.findViewById(id);
      if (rlNumber == null) {
        break missingId;
      }

      id = R.id.txt_consume;
      TextView txtConsume = rootView.findViewById(id);
      if (txtConsume == null) {
        break missingId;
      }

      id = R.id.txtGift;
      TextView txtGift = rootView.findViewById(id);
      if (txtGift == null) {
        break missingId;
      }

      id = R.id.txt_import;
      TextView txtImport = rootView.findViewById(id);
      if (txtImport == null) {
        break missingId;
      }

      id = R.id.txt_remain_actual;
      TextView txtRemainActual = rootView.findViewById(id);
      if (txtRemainActual == null) {
        break missingId;
      }

      id = R.id.txt_remain_plan;
      TextView txtRemainPlan = rootView.findViewById(id);
      if (txtRemainPlan == null) {
        break missingId;
      }

      return new ItemExportGiftTitleBinding((RelativeLayout) rootView, rlNumber, txtConsume,
          txtGift, txtImport, txtRemainActual, txtRemainPlan);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
