// Generated by data binding compiler. Do not edit!
package com.crayon.fieldapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.RecyclerView;
import com.crayon.fieldapp.R;
import com.crayon.fieldapp.ui.screen.detailTask.changeGift.export.ExportGiftViewModel;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class FragmentExportGiftBinding extends ViewDataBinding {
  @NonNull
  public final ImageButton imbIcBack;

  @NonNull
  public final ImageButton imbIcFilter;

  @NonNull
  public final ProgressBar pbLoading;

  @NonNull
  public final RelativeLayout rlNumber;

  @NonNull
  public final RelativeLayout rlToolbar;

  @NonNull
  public final RecyclerView rvProduct;

  @NonNull
  public final SearchView svProduct;

  @NonNull
  public final TextView tvTitle;

  @NonNull
  public final TextView txt1;

  @NonNull
  public final TextView txt12;

  @NonNull
  public final TextView txt2;

  @NonNull
  public final TextView txtActual;

  @NonNull
  public final RelativeLayout txtConsume;

  @NonNull
  public final TextView txtGift;

  @NonNull
  public final RelativeLayout txtImport;

  @NonNull
  public final TextView txtNhap;

  @NonNull
  public final RelativeLayout txtRemainActual;

  @NonNull
  public final RelativeLayout txtRemainPlan;

  @NonNull
  public final TextView txtTang;

  @NonNull
  public final TextView txtTonActual;

  @NonNull
  public final TextView txtTonPlan;

  @Bindable
  protected ExportGiftViewModel mViewModel;

  protected FragmentExportGiftBinding(Object _bindingComponent, View _root, int _localFieldCount,
      ImageButton imbIcBack, ImageButton imbIcFilter, ProgressBar pbLoading,
      RelativeLayout rlNumber, RelativeLayout rlToolbar, RecyclerView rvProduct,
      SearchView svProduct, TextView tvTitle, TextView txt1, TextView txt12, TextView txt2,
      TextView txtActual, RelativeLayout txtConsume, TextView txtGift, RelativeLayout txtImport,
      TextView txtNhap, RelativeLayout txtRemainActual, RelativeLayout txtRemainPlan,
      TextView txtTang, TextView txtTonActual, TextView txtTonPlan) {
    super(_bindingComponent, _root, _localFieldCount);
    this.imbIcBack = imbIcBack;
    this.imbIcFilter = imbIcFilter;
    this.pbLoading = pbLoading;
    this.rlNumber = rlNumber;
    this.rlToolbar = rlToolbar;
    this.rvProduct = rvProduct;
    this.svProduct = svProduct;
    this.tvTitle = tvTitle;
    this.txt1 = txt1;
    this.txt12 = txt12;
    this.txt2 = txt2;
    this.txtActual = txtActual;
    this.txtConsume = txtConsume;
    this.txtGift = txtGift;
    this.txtImport = txtImport;
    this.txtNhap = txtNhap;
    this.txtRemainActual = txtRemainActual;
    this.txtRemainPlan = txtRemainPlan;
    this.txtTang = txtTang;
    this.txtTonActual = txtTonActual;
    this.txtTonPlan = txtTonPlan;
  }

  public abstract void setViewModel(@Nullable ExportGiftViewModel viewModel);

  @Nullable
  public ExportGiftViewModel getViewModel() {
    return mViewModel;
  }

  @NonNull
  public static FragmentExportGiftBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_export_gift, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentExportGiftBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentExportGiftBinding>inflateInternal(inflater, R.layout.fragment_export_gift, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentExportGiftBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_export_gift, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentExportGiftBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentExportGiftBinding>inflateInternal(inflater, R.layout.fragment_export_gift, null, false, component);
  }

  public static FragmentExportGiftBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentExportGiftBinding bind(@NonNull View view, @Nullable Object component) {
    return (FragmentExportGiftBinding)bind(component, view, R.layout.fragment_export_gift);
  }
}
